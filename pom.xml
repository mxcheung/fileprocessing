<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- mvn clean test => Creates code coverage report for unit tests mvn clean 
		verify -P unit-tests => Creates code coverage report for unit tests and fails 
		if does not meet coverage ratios mvn clean verify -P integration-tests => 
		Creates code coverage report for unit tests and fails if does not meet coverage 
		ratios mvn clean verify -P all-tests => Creates code coverage reports for 
		unit and integration tests and fails if does not meet coverage ratios) mvn 
		clean package -P no-tests => Does not execute tests and creates the distributable 
		mvn clean verify -P all-tests checkstyle:check => runs all tests, checkstyle 
		and packages -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>au.com.maxcheung</groupId>
	<artifactId>future-clearing</artifactId>
	<version>${revision}${changelist}</version>
	<name>future-clearing</name>
	<description>Future Clearing</description>

	<properties>
		<revision>1.0.0</revision>
		<changelist>-SNAPSHOT</changelist>

		<!-- Default Profile and Test Execution Properties. Dev profile executing 
			only unit tests. -->
		<build.profile.id>dev</build.profile.id>
		<skip.integration.tests>true</skip.integration.tests>
		<skip.unit.tests>false</skip.unit.tests>

		<!-- Code coverage properties -->
		<coverage.line.ratio>0.70</coverage.line.ratio>
		<coverage.branch.ratio>0.70</coverage.branch.ratio>
		<coverage.complexity.ratio>0.70</coverage.complexity.ratio>

		<!-- Java Version source/target -->
		<jdk.source.version>1.8</jdk.source.version>
		<jdk.target.version>1.8</jdk.target.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Maven plugin versions -->
		<plugin.maven.compiler>3.7.0</plugin.maven.compiler>
		<plugin.maven.resources>3.0.2</plugin.maven.resources>
		<plugin.maven.surefire>2.21.0</plugin.maven.surefire>
		<plugin.maven.failsafe>2.21.0</plugin.maven.failsafe>
		<plugin.maven.jar>3.0.2</plugin.maven.jar>
		<plugin.maven.war>3.2.0</plugin.maven.war>
		<plugin.springframework.boot>1.5.10.RELEASE</plugin.springframework.boot>
		<plugin.build.helper>3.0.0</plugin.build.helper>
		<plugin.jacoco>0.8.0</plugin.jacoco>
		<plugin.maven.checkstyle>3.0.0</plugin.maven.checkstyle>
		<plugin.puppycrawl.checkstyle>8.8</plugin.puppycrawl.checkstyle>
		<!-- Jacoco Properties -->
		<jacoco.execution.data.file>${project.build.directory}/jacoco.exec</jacoco.execution.data.file>

		<!-- Dependency Library Versions -->

		<apache.commons.lang3.version>3.7</apache.commons.lang3.version>
		<commons-collections4.version>4.1</commons-collections4.version>

		<!-- Test Dependency Library Versions -->
		<junit-version>4.11</junit-version>

		<swagger2.version>2.7.0</swagger2.version>
		<jackson-dataformat-csv.version>2.9.4</jackson-dataformat-csv.version>
		<dozer.version>5.5.1</dozer.version>


	</properties>

	<profiles>
		<profile>
			<id>no-tests</id>
			<properties>
				<!-- NO tests are run. -->
				<skip.integration.tests>true</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>all-tests</id>
			<properties>
				<!-- All tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>unit-tests</id>
			<properties>
				<!-- Only integration tests are run. -->
				<skip.integration.tests>true</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>integration-tests</id>
			<properties>
				<!-- Only integration tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>
	</profiles>

	<!-- Inherit defaults from spring boot. -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.10.RELEASE</version>
	</parent>

	<build>
		<plugins>

			<!-- Checkstyle plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${plugin.maven.checkstyle}</version>
				<configuration>
					<includeTestSourceDirectory>true</includeTestSourceDirectory>
					<configLocation>config/checkstyle/checkstyle.xml</configLocation>
					<suppressionsLocation>config/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
					<suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>
				</configuration>
			</plugin>

			<!-- Need to add integration test folders to build -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${plugin.build.helper}</version>
				<executions>
					<!-- States that the plugin's add-test-source goal is executed at generate-test-sources 
						phase. -->
					<execution>
						<id>add-integration-test-sources</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<!-- Configures the source directory of integration tests. -->
							<sources>
								<source>src/integration-test/java</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-integration-test-resources</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<!-- Configures the resource directory of our integration tests -->
							<resources>
								<resource>
									<filtering>true</filtering>
									<directory>src/integration-test/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>



			<!-- Compiles java sources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${plugin.maven.compiler}</version>
				<configuration>
					<source>${jdk.source.version}</source>
					<target>${jdk.target.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${plugin.maven.resources}</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${plugin.jacoco}</version>
				<executions>
					<execution>
						<id>prepare</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->

					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Failsafe plugin is executed. -->
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests after 
						integration tests have been run. -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
					<!-- Code coverage must pass a minimum for the build to be successful. -->
					<execution>
						<id>check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<destFile>${jacoco.execution.data.file}</destFile>
							<rules>
								<!-- All classes must have 80% line and branch coverage . Note we 
									use 2 d.p so that we get can any check failure messages reported to 2 d.p -->
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.line.ratio}</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.branch.ratio}</minimum>
										</limit>
										<limit>
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.complexity.ratio}</minimum>
										</limit>
									</limits>
									<excludes>
										<exclude>**/*Test.java</exclude>
										<exclude>**/*IT.java</exclude>
									</excludes>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Runs unit tests in an isolated classloader. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${plugin.maven.surefire}</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. -->
					<excludes>
						<exclude>**/*IT.java</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- Runs the integration tests in an isolated container. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${plugin.maven.failsafe}</version>
				<executions>
					<!-- Ensures that both integration-test and verify goals of the Failsafe 
						Maven plugin are executed. -->
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>

	</build>

	<!-- REPORTING -->
	<reporting>

		<outputDirectory>${basedir}/target/site</outputDirectory>

		<plugins>

			<!-- Checkstyle plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${plugin.maven.checkstyle}</version>
				<configuration>
					<configLocation>config/checkstyle/checkstyle.xml</configLocation>
					<suppressionsLocation>config/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
					<suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>
				</configuration>
			</plugin>

			<!-- Generates a report based on the results of unit tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${plugin.maven.surefire}</version>
			</plugin>

		</plugins>

	</reporting>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jdbc</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.7</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-csv -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-csv</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>



		<!-- Runtime Dependencies -->
		<!-- <version>${jackson-dataformat-csv.version}</version> <dependency> 
			<groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> 
			</dependency> <dependency> <groupId>com.h2database</groupId> <artifactId>h2</artifactId> 
			<scope>runtime</scope> </dependency> -->

		<!-- <dependency> <groupId>net.sf.dozer</groupId> <artifactId>dozer</artifactId> 
			<version>${dozer.version}</version> </dependency> -->


		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->





		<!-- https://mvnrepository.com/artifact/org.antlr/ST4 -->

		<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
		<!-- <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-collections4</artifactId> 
			<version>4.1</version> </dependency> <dependency> <groupId>org.antlr</groupId> 
			<artifactId>ST4</artifactId> <version>4.0.7</version> </dependency> <dependency> 
			<groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>23.5-jre</version> 
			</dependency> -->


		<!-- https://mvnrepository.com/artifact/com.google.truth/truth -->
		<dependency>
			<groupId>com.google.truth</groupId>
			<artifactId>truth</artifactId>
			<version>0.36</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.guava/guava-testlib -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava-testlib</artifactId>
			<version>23.5-jre</version>
			<scope>test</scope>
		</dependency>




	</dependencies>

</project>
